//line parser.y:2

// Copyright (c) 2014 The lex Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// WARNING: If this file is parser.go then DO NOT EDIT.
// parser.go is generated by goyacc from parser.y (see the Makefile).

package lex

import __yyfmt__ "fmt"

//line parser.y:10
import (
	"fmt"
	"go/token"
)

var (
	defNamePos0 token.Position
)

//line parser.y:27
type yySymType struct {
	yys  int
	str  string
	strs []string
}

const tSECTION_DIV = 57346
const tBLANKS = 57347
const tVERBATIM_OPEN = 57348
const tVERBATIM_CLOSE = 57349
const tSTARTS = 57350
const tSSTART = 57351
const tXSTART = 57352
const tYYT = 57353
const tYYB = 57354
const tYYC = 57355
const tYYN = 57356
const tYYM = 57357
const tDEF_NAME = 57358
const tDEFINITION = 57359
const tUNINDENTED_COMMENT = 57360
const tINDENTED_TEXT = 57361
const tVERBATIM_LINE = 57362
const tPATTERN_LINE = 57363
const tUSER_CODE_LINE = 57364
const tNAME = 57365
const tSTARTS_PATTERN_LINE = 57366

var yyToknames = []string{
	"tSECTION_DIV",
	"tBLANKS",
	"tVERBATIM_OPEN",
	"tVERBATIM_CLOSE",
	"tSTARTS",
	"tSSTART",
	"tXSTART",
	"tYYT",
	"tYYB",
	"tYYC",
	"tYYN",
	"tYYM",
	"tDEF_NAME",
	"tDEFINITION",
	"tUNINDENTED_COMMENT",
	"tINDENTED_TEXT",
	"tVERBATIM_LINE",
	"tPATTERN_LINE",
	"tUSER_CODE_LINE",
	"tNAME",
	"tSTARTS_PATTERN_LINE",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line parser.y:316

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyNprod = 48
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 69

var yyAct = []int{

	40, 6, 38, 11, 62, 63, 12, 13, 14, 15,
	16, 17, 18, 8, 56, 9, 10, 65, 35, 57,
	37, 64, 7, 41, 68, 67, 59, 52, 45, 44,
	61, 34, 49, 36, 25, 53, 48, 33, 51, 39,
	42, 4, 66, 50, 47, 50, 46, 54, 43, 32,
	27, 28, 29, 30, 20, 3, 24, 23, 22, 58,
	21, 5, 60, 26, 19, 2, 1, 55, 31,
}
var yyPact = []int{

	-1000, -1000, 37, -3, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12, 34, -1000, 35, 35, -1000, 34, -1000, -1000, -1000,
	-1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, 19, -1000,
	25, 33, 4, 33, 18, -1000, -1000, -9, -1000, -1000,
	-1000, 3, -1000, -1000, 23, -22, -1000, -1000, -4, -1000,
	-8, -1000, -1000, 2, -1000, -1000, 0, -1000, -1000,
}
var yyPgo = []int{

	0, 0, 68, 34, 23, 67, 66, 65, 64, 2,
	63, 62, 61, 60, 59, 58, 57, 56, 55, 54,
	49, 46, 44, 42,
}
var yyR1 = []int{

	0, 6, 8, 6, 9, 9, 10, 11, 3, 12,
	13, 14, 12, 12, 12, 15, 12, 16, 12, 17,
	12, 12, 12, 12, 12, 12, 18, 18, 7, 20,
	20, 21, 20, 20, 22, 23, 20, 19, 19, 4,
	4, 5, 5, 5, 2, 2, 1, 1,
}
var yyR2 = []int{

	0, 1, 0, 4, 0, 1, 0, 0, 5, 1,
	0, 0, 6, 1, 1, 0, 4, 0, 3, 0,
	3, 2, 2, 2, 2, 2, 0, 2, 3, 1,
	1, 0, 4, 1, 0, 0, 6, 0, 2, 2,
	3, 1, 3, 1, 0, 2, 0, 2,
}
var yyChk = []int{

	-1000, -6, -7, -18, 4, -12, 4, 25, 16, 18,
	19, 6, 9, 10, 11, 12, 13, 14, 15, -8,
	-19, -13, -15, -16, -17, -3, -10, -3, -3, -3,
	-3, -2, -20, 25, 19, 6, 21, 8, -9, 5,
	-1, -4, 5, -4, -9, 22, -21, -22, 17, 7,
	20, 5, 23, 17, -1, -5, 23, 28, -14, 23,
	-11, 7, 26, 27, 25, 25, -23, 23, 24,
}
var yyDef = []int{

	26, -2, 1, 0, 2, 27, 37, 9, 10, 13,
	14, 15, 17, 19, 6, 6, 6, 6, 6, 44,
	28, 4, 46, 0, 0, 21, 4, 22, 23, 24,
	25, 3, 38, 29, 30, 31, 33, 34, 0, 5,
	0, 18, 0, 20, 0, 45, 46, 0, 11, 16,
	47, 0, 39, 7, 0, 0, 41, 43, 0, 40,
	0, 32, 35, 0, 12, 8, 0, 42, 36,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	25, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 28, 3, 27, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 26,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		//line parser.y:78
		{
			sc(yylex).Begin(_USER)
		}
	case 3:
		//line parser.y:82
		{
			usrCode = yyS[yypt-0].str
		}
	case 6:
		//line parser.y:92
		{
			sc(yylex).PushState(_DEF_NAME)
		}
	case 7:
		//line parser.y:97
		{
			sc(yylex).PopState()
		}
	case 8:
		//line parser.y:101
		{
			yyVAL.str = yyS[yypt-2].str
		}
	case 10:
		//line parser.y:108
		{
			defNamePos0 = sc(yylex).TokenStart()
			sc(yylex).PushState(_DEF_NAME)
		}
	case 11:
		//line parser.y:114
		{
			if _, ok := defs[yyS[yypt-3].str]; ok {
				logErr(fmt.Sprintf("%s:%q redefined", defNamePos0, yyS[yypt-3].str))
			}

			defs[yyS[yypt-3].str] = yyS[yypt-0].str
			defPos[yyS[yypt-3].str] = sc(yylex).TokenStart()
			sc(yylex).PopState()
		}
	case 13:
		//line parser.y:125
		{
			defCode = append(defCode, yyS[yypt-0].str+"\n")
		}
	case 14:
		//line parser.y:129
		{
			defCode = append(defCode, yyS[yypt-0].str+"\n")
		}
	case 15:
		//line parser.y:133
		{
			sc(yylex).PushState(_VERBATIM)
		}
	case 16:
		//line parser.y:138
		{
			defCode = append(defCode, yyS[yypt-1].str+"\n")
			sc(yylex).PopState()
		}
	case 17:
		//line parser.y:143
		{
			sc(yylex).PushState(_DEF_STARTS)
		}
	case 18:
		//line parser.y:147
		{
			sStarts = append(sStarts, yyS[yypt-0].strs...)
			sc(yylex).PopState()
		}
	case 19:
		//line parser.y:152
		{
			sc(yylex).PushState(_DEF_STARTS)
		}
	case 20:
		//line parser.y:156
		{
			xStarts = append(xStarts, yyS[yypt-0].strs...)
			for _, start := range yyS[yypt-0].strs {
				isXStart[start] = true
			}
			sc(yylex).PopState()
		}
	case 21:
		//line parser.y:165
		{
			_yyt = yyS[yypt-0].str
		}
	case 22:
		//line parser.y:170
		{
			_yyb = yyS[yypt-0].str
		}
	case 23:
		//line parser.y:175
		{
			_yyc = yyS[yypt-0].str
		}
	case 24:
		//line parser.y:180
		{
			_yyn = yyS[yypt-0].str
		}
	case 25:
		//line parser.y:185
		{
			_yym = yyS[yypt-0].str
		}
	case 28:
		//line parser.y:198
		{
			for s := range unrefStarts {
				logErr(fmt.Sprintf("%s:start condition %q declared and not used", sc(yylex).TokenStart(), s))
			}
			if len(rules) == 1 {
				logErr(fmt.Sprintf("%s:no rules defined", sc(yylex).TokenStart()))
			}
		}
	case 30:
		//line parser.y:211
		{
			moreAction(yyS[yypt-0].str)
		}
	case 31:
		//line parser.y:215
		{
			sc(yylex).PushState(_VERBATIM)
		}
	case 32:
		//line parser.y:220
		{
			moreAction(yyS[yypt-1].str)
			sc(yylex).PopState()
		}
	case 33:
		//line parser.y:225
		{
			rulePos = append(rulePos, sc(yylex).TokenStart())
			pat, re, action, bol, eol := parsePattern(sc(yylex).TokenStart(), yyS[yypt-0].str, map[string]bool{})
			unreachableRules[len(rules)] = true
			rules = append(rules, rule{nil, pat, re, action, nil, nil, bol, eol})
		}
	case 34:
		//line parser.y:232
		{
			sc(yylex).PushState(_STARTS)
		}
	case 35:
		//line parser.y:237
		{
			sc(yylex).PopState()
		}
	case 36:
		//line parser.y:241
		{
			rulePos = append(rulePos, sc(yylex).TokenStart())
			pat, re, action, bol, eol := parsePattern(sc(yylex).TokenStart(), yyS[yypt-0].str, map[string]bool{})
			unreachableRules[len(rules)] = true
			rules = append(rules, rule{yyS[yypt-3].strs, pat, re, action, nil, nil, bol, eol})
		}
	case 37:
		//line parser.y:250
		{
			sc(yylex).PushState(_RULES)
		}
	case 39:
		//line parser.y:258
		{
			if !addStartSet(yyS[yypt-0].str) {
				logErr(fmt.Sprintf("%s:start condition %q redeclared", sc(yylex).TokenStart(), yyS[yypt-0].str))
			}
			yyVAL.strs = append(yyVAL.strs, yyS[yypt-0].str)
		}
	case 40:
		//line parser.y:265
		{
			if !addStartSet(yyS[yypt-0].str) {
				logErr(fmt.Sprintf("%s:start condition %q redeclared", sc(yylex).TokenStart(), yyS[yypt-0].str))
			}
			yyVAL.strs = append(yyVAL.strs, yyS[yypt-0].str)
		}
	case 41:
		//line parser.y:275
		{
			if _, ok := defStarts[yyS[yypt-0].str]; !ok {
				logErr(fmt.Sprintf("%s:start condition %q undefined", sc(yylex).TokenStart(), yyS[yypt-0].str))
			}
			delete(unrefStarts, yyS[yypt-0].str)
			yyVAL.strs = append(yyVAL.strs, yyS[yypt-0].str)
		}
	case 42:
		//line parser.y:283
		{
			if _, ok := defStarts[yyS[yypt-0].str]; !ok {
				logErr(fmt.Sprintf("%s:start condition %q undefined", sc(yylex).TokenStart(), yyS[yypt-0].str))
			}
			delete(unrefStarts, yyS[yypt-0].str)
			yyVAL.strs = append(yyVAL.strs, yyS[yypt-0].str)
		}
	case 43:
		//line parser.y:291
		{
			yyVAL.strs = append(yyVAL.strs, "*")
		}
	case 44:
		//line parser.y:297
		{
			yyVAL.str = ""
		}
	case 45:
		//line parser.y:301
		{
			yyVAL.str += yyS[yypt-0].str
		}
	case 46:
		//line parser.y:307
		{
			yyVAL.str = ""
		}
	case 47:
		//line parser.y:311
		{
			yyVAL.str += yyS[yypt-0].str
		}
	}
	goto yystack /* stack new state and value */
}
